#knitr::opts_chunk$set(echo = TRUE)
# We first need to import the important libnrary for today's class, dplyr
library(dplyr)
library(readr)
library(DESeq2)
library(ggplot2)
library(EnhancedVolcano)
library(readxl)
counts <- read.csv('C:/Users/xmike/OneDrive/Desktop/Coding_in_R/Project/counts.csv', row.names = 1, header = TRUE)
metadata <- read.csv('C:/Users/xmike/OneDrive/Desktop/Coding_in_R/Project/metacounts.csv', row.names = 1, header = TRUE)
countsnew <- counts %>%
dplyr::select(Aln_YoungPBS.sam, Aln_MidAgePBS.sam, Aln_YoungSARS.sam, Aln_MidAgeSARS.sam)
### Run this chunk to import the counts table and metadata into your evironment.
#counts <- read.csv('airway_scaledcounts.csv', row.names = 1, header = TRUE)
#metadata <- read.csv('airway_metadata.csv', row.names = 1, header = TRUE)
### Modify the metadata table
sample_info <- metadata %>%
dplyr::select_all()
sample_info
#creat a deseqobject
dds <- DESeqDataSetFromMatrix(countData = countsnew,
colData = sample_info,
design = ~ Treatment)
#rename the SRR to the data name Aln_YoungSARS or visa versa
## Subset your ddseq object
subset <-  dds[(rowSums(counts(dds)) >= 10),]
### fix the base to a preferred treatment
relevel(dds$Treatment, ref='PBS')
### Run deseq2
deseq_ob <- DESeq(subset)
#### Save the results to a new object
res <- results(deseq_ob, alpha = 0.05)
#subset
#if (!require("BiocManager", quietly = TRUE))
#    install.packages("BiocManager")
#BiocManager::install("org.Mm.eg.db")
#BiocManager::install("EnhancedVolcano")
library("org.Mm.eg.db")
sigs.df <-  as.data.frame(res)
sigs.df$symbol <- mapIds(org.Mm.eg.db, keys= rownames(sigs.df), keytype = 'ENSEMBL', colum = "SYMBOL")
#keytypes(org.Mm.eg.db)
#sigs.df
EnhancedVolcano(sigs.df, x='log2FoldChange', y = 'padj', lab = sigs.df$symbol)
#Write your code here!
EnhancedVolcano(sigs.df, x='log2FoldChange', y = 'padj', lab = sigs.df$symbol,col=c('black','blue','yellow','green'))+coord_flip()
#install.packages("ComplexHeatmap")
#BiocManager::install("ComplexHeatmap")
library(ComplexHeatmap)
diff.df <- as.data.frame(sigs.df)
diff.df <- diff.df %>%
filter(padj < 1)
mat <- counts(deseq_ob, normalized = T)[rownames(diff.df),]
mat.z <- t(apply(mat,1, scale))
colnames(mat.z) <- colnames(mat)
Heatmap(mat.z, cluster_rows= T, cluster_columns= T, name = "Z-score")
diff.df <- as.data.frame(sigs.df)
diff.df <- diff.df %>%
filter(padj < 0.05, log2FoldChange > 3, baseMean > 100)
mat <- counts(deseq_ob, normalized = T)[rownames(diff.df),]
mat.z <- t(apply(mat,1, scale))
colnames(mat.z) <- colnames(mat)
Heatmap(mat.z, cluster_rows= T, cluster_columns= T, name = "Z-score", row_labels = diff.df[rownames(mat.z),]$symbol)
#BiocManager::install('clusterProfiler')
library(clusterProfiler)
diff.df <- as.data.frame(sigs.df)
diff.df <- diff.df %>%
filter(padj < 0.05, log2FoldChange >2, baseMean > 100)
genes_to_test <- rownames(diff.df)
GO_results <- enrichGO(gene = genes_to_test, OrgDb = "org.Mm.eg.db", keyType = 'ENSEMBL', ont = "BP")
fit <- plot(barplot(GO_results, showCategory=10))
library(gprofiler2)
go_upreg <- gost(genes_to_test, organism = 'mmusculus', significant = T)
gostplot(go_upreg, interactive = T)
res <- res[order(-res$stat),]
gene_list <- res$stat
names(gene_list) <- rownames(res)
gse <- gseGO(gene_list, ont = "BP", keyType = "ENSEMBL", OrgDb ="org.Mm.eg.db", eps = 1e-300 )
gseaplot(gse, geneSetID = "GO:0046324" )
